{"version":3,"file":"static/js/177.77419a78.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/Image.js","../node_modules/react-transition-group/esm/CSSTransition.js","../node_modules/react-transition-group/esm/SwitchTransition.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const propTypes = {\n  /**\n   * @default 'img'\n   */\n  bsPrefix: PropTypes.string,\n  /**\n   * Sets image as fluid image.\n   */\n  fluid: PropTypes.bool,\n  /**\n   * Sets image shape as rounded.\n   */\n  rounded: PropTypes.bool,\n  /**\n   * Sets image shape as circle.\n   */\n  roundedCircle: PropTypes.bool,\n  /**\n   * Sets image shape as thumbnail.\n   */\n  thumbnail: PropTypes.bool\n};\nconst defaultProps = {\n  fluid: false,\n  rounded: false,\n  roundedCircle: false,\n  thumbnail: false\n};\nconst Image = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  fluid,\n  rounded,\n  roundedCircle,\n  thumbnail,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'img');\n  return /*#__PURE__*/_jsx(\"img\", {\n    // eslint-disable-line jsx-a11y/alt-text\n    ref: ref,\n    ...props,\n    className: classNames(className, fluid && `${bsPrefix}-fluid`, rounded && `rounded`, roundedCircle && `rounded-circle`, thumbnail && `${bsPrefix}-thumbnail`)\n  });\n});\nImage.displayName = 'Image';\nImage.defaultProps = defaultProps;\nexport default Image;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\nimport { forceReflow } from './utils/reflow';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      if (node) forceReflow(node);\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n\nvar _leaveRenders, _enterRenders;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ENTERED, ENTERING, EXITING } from './Transition';\nimport TransitionGroupContext from './TransitionGroupContext';\n\nfunction areChildrenDifferent(oldChildren, newChildren) {\n  if (oldChildren === newChildren) return false;\n\n  if (React.isValidElement(oldChildren) && React.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Enum of modes for SwitchTransition component\n * @enum { string }\n */\n\n\nexport var modes = {\n  out: 'out-in',\n  in: 'in-out'\n};\n\nvar callHook = function callHook(element, name, cb) {\n  return function () {\n    var _element$props;\n\n    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);\n    cb();\n  };\n};\n\nvar leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function (_ref) {\n  var current = _ref.current,\n      changeState = _ref.changeState;\n  return React.cloneElement(current, {\n    in: false,\n    onExited: callHook(current, 'onExited', function () {\n      changeState(ENTERING, null);\n    })\n  });\n}, _leaveRenders[modes.in] = function (_ref2) {\n  var current = _ref2.current,\n      changeState = _ref2.changeState,\n      children = _ref2.children;\n  return [current, React.cloneElement(children, {\n    in: true,\n    onEntered: callHook(children, 'onEntered', function () {\n      changeState(ENTERING);\n    })\n  })];\n}, _leaveRenders);\nvar enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function (_ref3) {\n  var children = _ref3.children,\n      changeState = _ref3.changeState;\n  return React.cloneElement(children, {\n    in: true,\n    onEntered: callHook(children, 'onEntered', function () {\n      changeState(ENTERED, React.cloneElement(children, {\n        in: true\n      }));\n    })\n  });\n}, _enterRenders[modes.in] = function (_ref4) {\n  var current = _ref4.current,\n      children = _ref4.children,\n      changeState = _ref4.changeState;\n  return [React.cloneElement(current, {\n    in: false,\n    onExited: callHook(current, 'onExited', function () {\n      changeState(ENTERED, React.cloneElement(children, {\n        in: true\n      }));\n    })\n  }), React.cloneElement(children, {\n    in: true\n  })];\n}, _enterRenders);\n/**\n * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).\n * You can use it when you want to control the render between state transitions.\n * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.\n *\n * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.\n * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child.\n *\n * **Note**: If you want the animation to happen simultaneously\n * (that is, to have the old child removed and a new child inserted **at the same time**),\n * you should use\n * [`TransitionGroup`](https://reactcommunity.org/react-transition-group/transition-group)\n * instead.\n *\n * ```jsx\n * function App() {\n *  const [state, setState] = useState(false);\n *  return (\n *    <SwitchTransition>\n *      <CSSTransition\n *        key={state ? \"Goodbye, world!\" : \"Hello, world!\"}\n *        addEndListener={(node, done) => node.addEventListener(\"transitionend\", done, false)}\n *        classNames='fade'\n *      >\n *        <button onClick={() => setState(state => !state)}>\n *          {state ? \"Goodbye, world!\" : \"Hello, world!\"}\n *        </button>\n *      </CSSTransition>\n *    </SwitchTransition>\n *  );\n * }\n * ```\n *\n * ```css\n * .fade-enter{\n *    opacity: 0;\n * }\n * .fade-exit{\n *    opacity: 1;\n * }\n * .fade-enter-active{\n *    opacity: 1;\n * }\n * .fade-exit-active{\n *    opacity: 0;\n * }\n * .fade-enter-active,\n * .fade-exit-active{\n *    transition: opacity 500ms;\n * }\n * ```\n */\n\nvar SwitchTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(SwitchTransition, _React$Component);\n\n  function SwitchTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {\n      status: ENTERED,\n      current: null\n    };\n    _this.appeared = false;\n\n    _this.changeState = function (status, current) {\n      if (current === void 0) {\n        current = _this.state.current;\n      }\n\n      _this.setState({\n        status: status,\n        current: current\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = SwitchTransition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.appeared = true;\n  };\n\n  SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    if (props.children == null) {\n      return {\n        current: null\n      };\n    }\n\n    if (state.status === ENTERING && props.mode === modes.in) {\n      return {\n        status: ENTERING\n      };\n    }\n\n    if (state.current && areChildrenDifferent(state.current, props.children)) {\n      return {\n        status: EXITING\n      };\n    }\n\n    return {\n      current: React.cloneElement(props.children, {\n        in: true\n      })\n    };\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        mode = _this$props.mode,\n        _this$state = this.state,\n        status = _this$state.status,\n        current = _this$state.current;\n    var data = {\n      children: children,\n      current: current,\n      changeState: this.changeState,\n      status: status\n    };\n    var component;\n\n    switch (status) {\n      case ENTERING:\n        component = enterRenders[mode](data);\n        break;\n\n      case EXITING:\n        component = leaveRenders[mode](data);\n        break;\n\n      case ENTERED:\n        component = current;\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: {\n        isMounting: !this.appeared\n      }\n    }, component);\n  };\n\n  return SwitchTransition;\n}(React.Component);\n\nSwitchTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Transition modes.\n   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.\n   * `in-out`: New element transitions in first, then when complete, the current element transitions out.\n   *\n   * @type {'out-in'|'in-out'}\n   */\n  mode: PropTypes.oneOf([modes.in, modes.out]),\n\n  /**\n   * Any `Transition` or `CSSTransition` component.\n   */\n  children: PropTypes.oneOfType([PropTypes.element.isRequired])\n} : {};\nSwitchTransition.defaultProps = {\n  mode: modes.out\n};\nexport default SwitchTransition;"],"names":["Image","PropTypes","React","_ref","ref","bsPrefix","className","fluid","rounded","roundedCircle","thumbnail","props","_objectWithoutProperties","_excluded","useBootstrapPrefix","_jsx","_objectSpread","classNames","concat","displayName","defaultProps","removeClass","node","classes","split","forEach","c","removeOneClass","CSSTransition","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","appliedClasses","appear","enter","exit","onEnter","maybeNode","maybeAppearing","_this$resolveArgument","resolveArguments","appearing","removeClasses","addClass","onEntering","_this$resolveArgument2","type","onEntered","_this$resolveArgument3","onExit","onExiting","onExited","nodeRef","current","getClassNames","isStringClassNames","baseClassName","activeClassName","doneClassName","_inheritsLoose","_proto","prototype","phase","forceReflow","addOneClass","_addClass","_this$appliedClasses$","base","active","done","render","_this$props","_objectWithoutPropertiesLoose","Transition","_extends","propTypes","_leaveRenders","_enterRenders","modes","callHook","element","name","cb","_element$props","leaveRenders","changeState","in","ENTERING","_ref2","children","enterRenders","_ref3","ENTERED","_ref4","SwitchTransition","state","status","appeared","setState","componentDidMount","getDerivedStateFromProps","mode","oldChildren","newChildren","key","EXITING","component","_this$state","data","TransitionGroupContext","value","isMounting"],"sourceRoot":""}